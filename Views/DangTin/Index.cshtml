@inject ChodoidoUTE.Services.Interface.ICategory _category;
@{
    var categories = await _category.GetCategories();
}
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        padding: 20px;
    }

    .container {
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }

    .form-section {
        margin-bottom: 30px;
    }

        .form-section h6 {
            font-weight: bold;
            color: #333;
            margin-bottom: 15px;
        }

        .form-section label {
            font-weight: bold;
            margin-top: 10px;
        }

    .form-control {
        border-radius: 5px;
    }

    .image-preview {
        display: flex;
        flex-wrap: wrap;
        margin-top: 10px;
        gap: 10px;
    }

        .image-preview img,
        .image-preview video {
            width: 75px;
            height: 75px;
            object-fit: cover;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .image-preview video {
            background: #000;
        }

    .btn-submit {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 16px;
        transition: background-color 0.3s;
    }

        .btn-submit:hover {
            background-color: #0056b3;
            cursor: pointer;
        }

    .image-preview, .video-preview {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 10px;
    }

        .image-preview img,
        .video-preview video {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 5px;
            transition: transform 0.2s;
        }

            .image-preview img:hover,
            .video-preview video:hover {
                transform: scale(1.1);
            }

    button {
        transition: background 0.2s;
    }

        button:hover {
            background: darkred;
        }

</style>

<div class="container">
    <!-- Form -->
    <form action="/user/product/create" method="post" id="createTinForm" enctype="multipart/form-data">
        <!-- Hình ảnh và Video -->
        <div class="form-section">
            <h6>Hình ảnh và Video sản phẩm</h6>
            <div>
                <label for="imageUpload">Tải lên hình ảnh (ít nhất 1 ảnh):</label>
                <input type="file" id="ImageUpload" name="ImageUpload" class="form-control" accept="image/*" multiple>
                <div class="image-preview" id="imagePreview"></div>
            </div>
            <div class="mt-3">
                <label for="videoUpload">Tải lên video:</label>
                <input type="file" id="VideoUpload" name="VideoUpload" class="form-control" accept="video/*" multiple>
                <div class="image-preview" id="videoPreview"></div>
            </div>
        </div>
        <!-- Các trường khác -->
        <div class="form-section">
            <label for="category">Danh Mục Tin Đăng *</label>
            <select class="form-select" id="CategoryId" name="CategoryId">
                @foreach (var item in categories)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </select>
        </div>
        <div class="form-section">
            <h6>Thông tin chi tiết</h6>
            <label for="Title">Tiêu đề</label>
            <input class="form-control" id="Title" name="Title" type="text" required>
            <label for="Price">Giá</label>
            <input class="form-control" id="Price" name="Price" type="number" required>
            <label for="Count">Số lượng</label>
            <input class="form-control" id="Count" name="Count" type="number" required>
            <label for="isNew">Tình trạng</label>
            <select id="IsNew" class="form-select" name="IsNew" required>
                <option value="true">Mới</option>
                <option value="false">Đã dùng</option>
            </select>
        </div>
        <div class="form-section">
            <h6>Tiêu đề tin đăng và Mô tả chi tiết</h6>
            <label for="Description" class="mt-3">Mô tả chi tiết *</label>
            <textarea class="form-control" id="Description" name="Description" rows="5"></textarea>
        </div>
        <!-- Nút Submit -->
        <div class="text-center">
            <button type="submit" class="btn-submit">Đăng Tin</button>
        </div>
    </form>

</div>
<script>
    const uploadedFiles = {
        images: [],
        videos: []
    };

    // Hàm kiểm tra tệp
    function validateFile(file, type, maxSizeMB) {
        const validTypes = type === 'image' ? ['image/jpeg', 'image/png', 'image/gif'] : ['video/mp4', 'video/webm'];
        if (!validTypes.includes(file.type)) {
            alert(`Chỉ chấp nhận ${type === 'image' ? 'ảnh' : 'video'} dạng: ${validTypes.join(', ')}`);
            return false;
        }
        if (file.size > maxSizeMB * 1024 * 1024) {
            alert(`Kích thước tối đa cho mỗi ${type === 'image' ? 'ảnh' : 'video'} là ${maxSizeMB} MB`);
            return false;
        }
        return true;
    }

    // Tạo phần tử xem trước
    function createPreviewElement(type, file, container, filesArray) {
        const wrapper = document.createElement('div');
        wrapper.style.position = 'relative';

        if (type === 'image') {
            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            img.alt = 'Hình ảnh đã tải lên';
            img.style.width = '75px';
            img.style.height = '75px';
            img.style.objectFit = 'cover';
            wrapper.appendChild(img);
        } else if (type === 'video') {
            const video = document.createElement('video');
            video.src = URL.createObjectURL(file);
            video.controls = true;
            video.style.width = '75px';
            video.style.height = '75px';
            wrapper.appendChild(video);
        }

        // Thêm nút xóa
        const removeBtn = document.createElement('button');
        removeBtn.textContent = 'X';
        removeBtn.style.position = 'absolute';
        removeBtn.style.top = '5px';
        removeBtn.style.right = '5px';
        removeBtn.style.background = 'red';
        removeBtn.style.color = 'white';
        removeBtn.style.border = 'none';
        removeBtn.style.borderRadius = '81%';
        removeBtn.style.cursor = 'pointer';
        removeBtn.style.width = '10px';
        removeBtn.style.height = '10px';
        removeBtn.style.fontSize = '8px';
        removeBtn.style.alignItems = 'center';
        removeBtn.style.display = 'flex';
        removeBtn.style.justifyContent = 'center';
        removeBtn.style.padding = '7px';

        removeBtn.onclick = () => {
            wrapper.remove();
            const index = filesArray.indexOf(file);
            if (index > -1) filesArray.splice(index, 1);
        };

        wrapper.appendChild(removeBtn);
        container.appendChild(wrapper);
    }

    // Xử lý tải lên hình ảnh
    const imageUpload = document.getElementById('ImageUpload');
    const imagePreview = document.getElementById('imagePreview');

    imageUpload.addEventListener('change', (event) => {
        Array.from(event.target.files).forEach(file => {
            if (validateFile(file, 'image', 10)) { // 10 MB giới hạn cho ảnh
                uploadedFiles.images.push(file);
                createPreviewElement('image', file, imagePreview, uploadedFiles.images);
            }
        });
    });

    // Xử lý tải lên video
    const videoUpload = document.getElementById('VideoUpload');
    const videoPreview = document.getElementById('videoPreview');

    videoUpload.addEventListener('change', (event) => {
        Array.from(event.target.files).forEach(file => {
            if (validateFile(file, 'video', 50)) { // 50 MB giới hạn cho video
                uploadedFiles.videos.push(file);
                createPreviewElement('video', file, videoPreview, uploadedFiles.videos);
            }
        });
    });

</script>
@* @section Scripts {
    <script>
        $('#createTinForm').on('submit', function (event) {
            event.preventDefault(); // Ngăn gửi form mặc định

            const formData = new FormData(this);

            for (let [key, value] of formData.entries()) {
                console.log(key, value);
            }
            // Gửi AJAX request
            $.ajax({
                url: '/user/product/create', 
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    showToast(response.message, 'success');
                },
                error: function (xhr, status, error) {
                    console.error(`Error: ${error}`);
                    console.error(xhr.responseText);
                    showToast(message, 'danger');
                }
            });
        });


    </script>

} *@

